#labels Phase-Implementation,Examples
Usage examples for openpasl packages

<wiki:toc/>

= PASL_DB =

Very basic example of DB usage

{{{

<?

require_once 'PASL/DB/DB.php';
$dsn = 'mysql://user:pass@host/db';
$query = 'SELECT * FROM test';

// Using native driver support
$dbInstance = PASL_DB::singleton($dsn);
$result = $dbInstance->query($query);
$array = $dbInstance->fetchRow($result);
$dbInstance->free($result);

var_dump($array);

// Using MDB2 compatability support
$dbInstance = PASL_DB::singleton($dsn, false, true);
$result = $dbInstance->query($query);
$array = $result->fetchRow();
$result->free();

var_dump($array);

?>

}}}

Notice the difference in how the result type is handled and the various changes needed if directly addressing the result from a query.
DB has implemented some API compatability with MDB2 in the usage of some common operators.  Below is an example of dealing with
results in an API compatable way.

{{{

<?

require_once 'PASL/DB/DB.php';

$dsn = 'mysql://user:pass@host/db';
$query = 'SELECT * FROM test';

// Using native driver support
$dbInstance = PASL_DB::singleton($dsn);
$array = $dbInstance->queryAll($query);
var_dump($array);

// Using MDB2 compatability support
$dbInstance = PASL_DB::singleton($dsn, false, true);
$array = $dbInstance->queryAll($query);
var_dump($array)

?>

}}}

While it is always recommended to use a native driver, there may be times when a native driver is not available, a database provider
changes before a native driver can be implemented, or perhaps changes need to be made quickly without concern for the particular sql
syntax structure.  In these cases, MDB2 can be used temporarily or just in those places where foreign queries need to be made.  The
following example illustrates a scenario in which an application was developed against MySQL but where account information is being
migrated to Oracle.  However, not all accounts have been migrated yet - so some may still be in MySQL.

{{{

<?

require_once 'PASL/DB/DB.php';

$dsn = 'mysql://user:pass@host/db';

// Fetch user data
$dbInstance = PASL_DB::singleton($dsn);
$userInfo = $dbInstance->queryAll("SELECT * FROM `users` WHERE `id`='1'");

// Fetch account data
if ($userInfo['account_id'] > 1000) $dbInstance = PASL_DB::singleton('oracle://user:pass@host/db', false, true);
$accountInfo = $dbInstance->queryAll("SELECT * FROM `account_data` WHERE `account_id`='" . $userInfo['account_id'] . "'");

?>

}}}

In the preceeding example, the use of the MDB2 driver allows abstraction from Oracle and Oracle's SQL syntax.  It also provides
drop-in placement of the Oracle driver.  However, this comes at the significant performance penalty of using PEAR/MDB2.  Regardless,
this feature allows developers to quickly refactor and make significant migratory efforts without having to spend time working on a
native driver upfront.  This is also useful in applications where perhaps it is necessary to make the occasional query to a foreign
database and where the performance drawbacks of MDB2 don't present a threat to overall application performance.  Sometimes it is
necessary to make small compromises ;)

= PASL_WEB_SIMPL =

= PASL_RBAC =
A short example on how to use the PASL_RBAC classes and information about the schema.


== A PASL_RBAC object ==

Below you'll see how to check to see if user 'thundercloud' can write to the user table
{{{
<?
// Include dependencies
require_once('PASL/DB/DB.php');
require_once('PASL/RBAC/User.php');
require_once('PASL/RBAC/RBAC.php');
require_once('PASL/ORM/ORM.php');

// Register A DB with the ORM
$DB = PASL_DB::factory("mysql://user:pass@localhost/rbac");

// Register the DB
PASL_ORM::registerDB('pasl_rbac', $DB);

// Grab a user
$User = new PASL_RBAC_User(9, 'thundercloud');

// Grab the user table
$UserTable = new PASL_RBAC_User;

// Check to see if the user can 'write' to the user table
$can = $User->can('write', $UserTable);

if($can) echo "User can write to the user table";
else echo "User can't write to the user table";


?>
}}}
Below you'll see how to check to see if user 'thundercloud' can alter the user's own account.  Pretty much the same as the example above except we add parameters to the RBAC object.

{{{
<?
// Include dependencies
require_once('PASL/DB/DB.php');
require_once('PASL/RBAC/User.php');
require_once('PASL/RBAC/RBAC.php');
require_once('PASL/ORM/ORM.php');

// Register A DB with the ORM
$DB = PASL_DB::factory("mysql://user:pass@localhost/rbac");

// Register the DB
PASL_ORM::registerDB('pasl_rbac', $DB);

// Grab a user
$User = new PASL_RBAC_User(9, 'thundercloud');

// Grab the user
$UserEntry = new PASL_RBAC_User(8, 'someuser');

// Check to see if the user can modify someuser's account information
$can = $User->can('write', $UserEntry);

if($can) echo "User can modify the user's information";
else echo "User can't modify the user's information";


?>
}}}




== The DB schema ==
